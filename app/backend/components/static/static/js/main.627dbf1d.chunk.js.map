{"version":3,"sources":["JsonTreeView.js","addUserTree.js","App.js","serviceWorker.js","index.js"],"names":["JsonTreeView","props","react_default","a","createElement","lib_default","data","initialState","parent_node_id","node_value_display","left_or_right","number_children","userSchema","yup","shape","required","AddUserTreeForm","_useState","useState","_useState2","Object","slicedToArray","user","setUser","handleValues","react","formik_esm","initialValues","onSubmit","values","actions","console","log","setSubmitting","setTimeout","resetForm","validationSchema","isSubmitting","className","s","overlay","handleSubmit","form","type","placeholder","onChange","handleChange","name","value","text_field","errors","touched","field_text","disabled","dirty","concat","button","submit_button","onClick","handleReset","JSON","stringify","idCounter","parentMap","1","2","3","4","demo_data","id","member_details","Map","children","searchTreeById","element","matchingId","i","result","length","App","dataState","setDataState","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","currentSum","setCurrentSum","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","get_tree_url","res","parsed","wrap","_context","prev","next","window","calc_assets_url","calc_service_uid","fetch","sent","json","stop","apply","this","arguments","fetchData","JsonTreeView_JsonTreeView","shouldExpandNode","raw","method","mode","credentials","headers","Accept","Content-Type","Access-Control-Allow-Credentials","body","then","response","sum_lp","catch","err","addUserTree","undefined","parent","parseInt","newChild","push","set","pair","objectSpread","addChildToId","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.627dbf1d.chunk.js","sourcesContent":["import React from 'react';\nimport JSONTree from 'react-json-tree';\n\nexport const JsonTreeView = (props) => {\n    \n    return (\n        <JSONTree data={props.data} />\n    )\n}","import React, { useState, Fragment } from \"react\";\nimport { Formik, Field } from \"formik\";\nimport s from \"./component/app.component.css\";\nimport * as yup from \"yup\";\n\n\nconst initialState = {\n  parent_node_id: \"\",\n  node_value_display: \"\",\n  left_or_right: \"\",\n  number_children: \"\"\n};\nconst userSchema = yup.object().shape({\n  parent_node_id:yup.string().required(),\n  node_value_display: yup.string().required(),\n  left_or_right: yup.string().required(),\n  number_children: yup.string(), \n});\nfunction AddUserTreeForm(props) {\n  const [user, setUser] = useState(initialState);\n  if(user.node_value_display !== \"\"){\n    props.handleValues(user)\n  }\n  \n  return (\n    <Fragment> \n      <Formik\n        initialValues={user}\n        onSubmit={(values, actions) => {\n          console.log(actions);\n          actions.setSubmitting(true);\n          setUser(values);\n          setTimeout(() => {\n            actions.resetForm(initialState);\n            actions.setSubmitting(false);\n          }, 2000);\n        }}\n        validationSchema={userSchema}\n      >\n        {props =>\n          !props.isSubmitting ? (\n            <form onSubmit={props.handleSubmit} className={s.form}>\n              <Field\n                type=\"parent_node_id\"\n                placeholder=\"Enter parent_node_id\"\n                onChange={props.handleChange}\n                name=\"parent_node_id\"\n                value={props.values.parent_node_id}\n                className={s.text_field}\n              />\n\n              {props.errors.parent_node_id && props.touched.parent_node_id ? (\n                <span className={s.field_text}>{props.errors.parent_node_id}</span>\n              ) : (\n                \"\"\n              )}\n              <Field\n                type=\"node_value_display\"\n                placeholder=\"Enter node_value_display\"\n                onChange={props.handleChange}\n                name=\"node_value_display\"\n                value={props.values.node_value_display}\n                className={s.text_field}\n              />\n\n              {props.errors.node_value_display && props.touched.node_value_display ? (\n                <span className={s.field_text}>{props.errors.node_value_display}</span>\n              ) : (\n                \"\"\n              )}\n\n             \n              <Field\n                name=\"left_or_right\"\n                onChange={props.handleChange}\n                value={props.values.left_or_right}\n                type=\"text\"\n                placeholder=\"left_or_right\"\n                className={s.text_field}\n              />\n              {props.errors.left_or_right && props.touched.left_or_right ? (\n                <span className={s.field_text}>{props.errors.left_or_right}</span>\n              ) : (\n                \"\"\n              )}\n              <button\n                type=\"submit\"\n                disabled={!props.dirty && !props.isSubmitting}\n                className={`${s.button} ${s.submit_button}`}\n              >\n                Submit\n              </button>\n              <button\n                disabled={!props.dirty}\n                onClick={props.handleReset}\n                type=\"button\"\n                className={s.button}\n              >\n                Reset\n              </button>\n            </form>\n          ) : (\n            <div className={s.overlay} />\n          )\n        }\n      </Formik>\n      <span className=\"output\">{JSON.stringify(user, null, 2)}</span>\n    </Fragment>\n  );\n}\nexport default AddUserTreeForm;","import React, { useState, useEffect,  Fragment } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport {JsonTreeView}from './JsonTreeView';\nimport { Map } from 'immutable'\nimport AddUserTreeForm from './addUserTree';\n\n/* counter to keep track of unique ids.  Starts at 14 due to demo data. Will never decrease, only increase.*/\nvar idCounter = 5;\n/* Map to help find a node parent in big-O O(1) time */\nvar parentMap = {1:0, 2:1,3:2,4:1};\n\n/* this is demo data used to show the data structure */\nconst demo_data = {\n  node_value_display: '1',\n  id: 1,\n  member_details: Map({  left_or_right:'root', number_children: '2', }),\n  children: [\n      {\n          node_value_display: '2',\n          id: 2,\n          member_details: Map({  left_or_right:'left', number_children: '1', }),\n          children: [\n              { node_value_display: '5',\n              id: 3,\n              member_details: Map({  left_or_right:'right', number_children: '0', },),\n              children: []\n             }\n          ]\n      },\n      {\n          node_value_display: '3',\n          id: 4,\n          member_details: Map({ left_or_right:'right', number_children: '0', },),\n          children: []\n      }\n    ]}\n      \n\nfunction searchTreeById(element, matchingId){\n  if(element.id === matchingId){\n       return element;\n  }else if (element.children != null){\n       var i;\n       var result = null;\n       for(i=0; result == null && i < element.children.length; i++){\n            result = searchTreeById(element.children[i], matchingId);\n       }\n       return result;\n  }\n  return null;\n}\n\nfunction addChildToId(element, matchingId, node_value_display = '0',  left_or_right = 'left', number_children = '0'){\n  idCounter++;\n  var parent =  searchTreeById(element, parseInt(matchingId))\n \n  var newChild = {\n    node_value_display: node_value_display,\n    id: idCounter,\n    children: [],\n    member_details: Map({  left_or_right: left_or_right, number_children: number_children, })\n  }\n  \n  if(parent.children == null){\n    //add children array\n    parent.children = []\n  }\n  if (parent.children.length < 2){\n    parent.children.push(newChild)\n    parent.member_details.set('number_children',parent.children.length);\n    //update parentMap\n    var pair = {};\n    pair[idCounter] = parent.id;\n    parentMap = {...parentMap, ...pair}; \n  }\n  else {\n    console.log(\"find another node\")\n  }\n  \n  \n  return null;\n}\n\nfunction removeNodeById(element, matchingId){\n   let parentid = parentMap[matchingId];\n   if (parentid == null){\n     return null\n   }\n   let parent = searchTreeById(element, parentid);\n   if (parent.children.length === 1){\n     \n     delete parent.children\n   }\n   else {\n    parent.children = parent.children.filter(function(el) { return el.id !== matchingId; }); \n\n   }\n   //update parentMap\n   delete parentMap[matchingId]\n\n}\n\nfunction App() {\n  const [dataState, setDataState] = useState(demo_data);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentSum, setCurrentSum] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const get_tree_url = window.calc_assets_url +\"/\" + window.calc_service_uid\n      const res = await fetch(get_tree_url);\n      const parsed = await res.json();\n      \n      if (parsed.data){\n        setDataState(parsed.data);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  const handleValues = (values) => {\n    addChildToId(dataState, values.parent_node_id, values.node_value_display,  values.left_or_right, values.number_children);\n  };\n  \n  const onClickDN = () => {\n    removeNodeById(dataState, idCounter)\n  }\n\n  const onClickSJ = () => {\n    console.log(\"sending data\")\n    fetch(window.calc_assets_url + \"/\" +  window.calc_service_uid, {\n        method: 'POST',\n        mode: 'cors',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Credentials': 'true'\n        },\n        body: JSON.stringify(dataState)\n      }).then(response => response.json())\n        .then(data => {\n          console.log(data.data.sum_lp);\n          setCurrentSum(data.data.sum_lp)\n        })\n        .catch(function(err) {\n        // Called if the server returns any errors\n          console.log(\"Error:\"+err);\n        });\n  }\n\n  \n\n  return (\n   \n\n   \n    <div className=\"App\">\n      <div className=\"App-header\"> \n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n         <Fragment>\n                <JsonTreeView data={dataState} shouldExpandNode={raw => true} />\n                <p>Calc Sum Longest Path</p>\n                <button onClick={()=>{onClickSJ()}}>Send to Calc Service</button>\n                <p>Current Sum: {currentSum}</p>\n                <p>Add a new Node</p>\n                <AddUserTreeForm handleValues={handleValues} />\n                {/* <p>Remove a Node</p>\n                <button onClick={()=>{onClickDN()}}>Delete Node {idCounter}</button> */}\n          </Fragment>\n\n\n      )}\n\n      </div>\n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}