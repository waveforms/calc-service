{"version":3,"sources":["JsonTreeView.js","addUserTree.js","App.js","serviceWorker.js","index.js"],"names":["JsonTreeView","props","react_default","a","createElement","lib_default","data","initialState","parent_node_id","node_value_display","node_value","left_or_right","number_children","userSchema","yup","shape","required","AddUserTreeForm","_useState","useState","_useState2","Object","slicedToArray","user","setUser","handleValues","react","formik_esm","initialValues","onSubmit","values","actions","console","log","setSubmitting","setTimeout","resetForm","validationSchema","isSubmitting","className","s","overlay","handleSubmit","form","type","placeholder","onChange","handleChange","name","value","text_field","errors","touched","field_text","disabled","dirty","concat","button","submit_button","onClick","handleReset","JSON","stringify","idCounter","parentMap","1","2","3","4","id","member_details","Map","children","searchTreeById","element","matchingId","i","result","length","arguments","undefined","parent","parseInt","newChild","push","set","pair","objectSpread","addChildToId","onClickDN","parentid","filter","el","removeNodeById","onClickSJ","fetch","window","calc_assets_url","method","headers","Accept","Content-Type","body","then","response","json","sum_lp","alert","catch","err","data_subsection","App","JsonTreeView_JsonTreeView","shouldExpandNode","raw","addUserTree","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f76e7fc5.chunk.js","sourcesContent":["import React from 'react';\nimport JSONTree from 'react-json-tree';\n\nexport const JsonTreeView = (props) => {\n    \n    return (\n        <JSONTree data={props.data} />\n    )\n}","import React, { useState, Fragment } from \"react\";\nimport { Formik, Field } from \"formik\";\nimport s from \"./component/app.component.css\";\nimport * as yup from \"yup\";\n\n\nconst initialState = {\n  parent_node_id: \"\",\n  node_value_display: \"\",\n  node_value: \"\",\n  left_or_right: \"\",\n  number_children: \"\"\n};\nconst userSchema = yup.object().shape({\n  parent_node_id:yup.string().required(),\n  node_value: yup.string().required(),\n  node_value_display: yup.string().required(),\n  left_or_right: yup.string().required(),\n  number_children: yup.string(), \n});\nfunction AddUserTreeForm(props) {\n  const [user, setUser] = useState(initialState);\n  if(user.node_value_display !== \"\"){\n    props.handleValues(user)\n  }\n  \n  return (\n    <Fragment> \n      <Formik\n        initialValues={user}\n        onSubmit={(values, actions) => {\n          console.log(actions);\n          actions.setSubmitting(true);\n          setUser(values);\n          setTimeout(() => {\n            actions.resetForm(initialState);\n            actions.setSubmitting(false);\n          }, 2000);\n        }}\n        validationSchema={userSchema}\n      >\n        {props =>\n          !props.isSubmitting ? (\n            <form onSubmit={props.handleSubmit} className={s.form}>\n              <Field\n                type=\"parent_node_id\"\n                placeholder=\"Enter parent_node_id\"\n                onChange={props.handleChange}\n                name=\"parent_node_id\"\n                value={props.values.parent_node_id}\n                className={s.text_field}\n              />\n\n              {props.errors.parent_node_id && props.touched.parent_node_id ? (\n                <span className={s.field_text}>{props.errors.parent_node_id}</span>\n              ) : (\n                \"\"\n              )}\n              <Field\n                type=\"node_value_display\"\n                placeholder=\"Enter node_value_display\"\n                onChange={props.handleChange}\n                name=\"node_value_display\"\n                value={props.values.node_value_display}\n                className={s.text_field}\n              />\n\n              {props.errors.node_value_display && props.touched.node_value_display ? (\n                <span className={s.field_text}>{props.errors.node_value_display}</span>\n              ) : (\n                \"\"\n              )}\n\n              <Field\n                type=\"node_value\"\n                onChange={props.handleChange}\n                name=\"node_value\"\n                value={props.values.node_value}\n                placeholder=\"node_value\"\n                className={s.text_field}\n              />\n\n              {props.errors.node_value && props.touched.node_value ? (\n                <span className={s.field_text}>{props.errors.node_value}</span>\n              ) : (\n                \"\"\n              )}\n              <Field\n                name=\"left_or_right\"\n                onChange={props.handleChange}\n                value={props.values.left_or_right}\n                type=\"text\"\n                placeholder=\"left_or_right\"\n                className={s.text_field}\n              />\n              {props.errors.left_or_right && props.touched.left_or_right ? (\n                <span className={s.field_text}>{props.errors.left_or_right}</span>\n              ) : (\n                \"\"\n              )}\n              <button\n                type=\"submit\"\n                disabled={!props.dirty && !props.isSubmitting}\n                className={`${s.button} ${s.submit_button}`}\n              >\n                Submit\n              </button>\n              <button\n                disabled={!props.dirty}\n                onClick={props.handleReset}\n                type=\"button\"\n                className={s.button}\n              >\n                Reset\n              </button>\n            </form>\n          ) : (\n            <div className={s.overlay} />\n          )\n        }\n      </Formik>\n      <span className=\"output\">{JSON.stringify(user, null, 2)}</span>\n    </Fragment>\n  );\n}\nexport default AddUserTreeForm;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\n//import {TreeExample}from './TreeExample';\nimport {JsonTreeView}from './JsonTreeView';\nimport { Map } from 'immutable'\nimport AddUserTreeForm from './addUserTree';\n\n/* counter to keep track of unique ids.  Starts at 14 due to demo data. Will never decrease, only increase.*/\nvar idCounter = 5;\n/* Map to help find a node parent in big-O O(1) time */\nvar parentMap = {1:0, 2:1,3:2,4:1};\n\n/* this is demo data used to show the data structure */\nconst data = {\n  node_value_display: '1',\n  id: 1,\n  member_details: Map({ node_value: '1', left_or_right:'root', number_children: '2', }),\n  children: [\n      {\n          node_value_display: '2',\n          id: 2,\n          member_details: Map({ node_value: '2', left_or_right:'left', number_children: '1', }),\n          children: [\n              { node_value_display: '5',\n              id: 3,\n              member_details: Map({ node_value: '2', left_or_right:'right', number_children: '0', },),\n              children: []\n             }\n          ]\n      },\n      {\n          node_value_display: '3',\n          id: 4,\n          member_details: Map({ node_value: '3', left_or_right:'right', number_children: '0', },),\n          children: []\n      }\n    ]}\n      \n\nfunction searchTreeById(element, matchingId){\n  if(element.id === matchingId){\n       return element;\n  }else if (element.children != null){\n       var i;\n       var result = null;\n       for(i=0; result == null && i < element.children.length; i++){\n            result = searchTreeById(element.children[i], matchingId);\n       }\n       return result;\n  }\n  return null;\n}\n\nfunction addChildToId(element, matchingId, node_value_display = '0', node_value = '0', left_or_right = 'left', number_children = '0'){\n  idCounter++;\n  var parent =  searchTreeById(element, parseInt(matchingId))\n \n  var newChild = {\n    node_value_display: node_value_display,\n    id: idCounter,\n    member_details: Map({ node_value: node_value, left_or_right: left_or_right, number_children: number_children, })\n  }\n  \n  if(parent.children == null){\n    //add children array\n    parent.children = []\n  }\n  if (parent.children.length < 2){\n    parent.children.push(newChild)\n    parent.member_details.set('number_children',parent.children.length);\n    //update parentMap\n    var pair = {};\n    pair[idCounter] = parent.id;\n    parentMap = {...parentMap, ...pair}; \n  }\n  else {\n    console.log(\"find another node\")\n  }\n  \n  \n  return null;\n}\n\nfunction removeNodeById(element, matchingId){\n   let parentid = parentMap[matchingId];\n   if (parentid == null){\n     return null\n   }\n   let parent = searchTreeById(element, parentid);\n   if (parent.children.length === 1){\n     \n     delete parent.children\n   }\n   else {\n    parent.children = parent.children.filter(function(el) { return el.id !== matchingId; }); \n\n   }\n   //update parentMap\n   delete parentMap[matchingId]\n\n}\n\nconst handleValues = (values) => {\n  addChildToId(data, values.parent_node_id, values.node_value_display, values.node_value, values.left_or_right, values.number_children);\n};\n\nconst onClickDN = () => {\n  removeNodeById(data, idCounter)\n}\n\nconst onClickSJ = () => {\n  console.log(\"sending data\")\n  fetch(window.calc_assets_url, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json())\n      .then(data => {\n        console.log(data.data.sum_lp);\n        alert(data.data.sum_lp)\n      })\n      .catch(function(err) {\n      // Called if the server returns any errors\n        console.log(\"Error:\"+err);\n      });\n}\n\n\n\n\nvar data_subsection = searchTreeById(data, 1);\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <JsonTreeView data={data_subsection} shouldExpandNode={raw => true} />\n      <p>Calc Sum Longest Path</p>\n      <button onClick={()=>{onClickSJ()}}>Send to Calc Service</button>\n      <p>Add a new Node</p>\n      <AddUserTreeForm handleValues={handleValues} />\n      <p>Remove a Node</p>\n      <button onClick={()=>{onClickDN()}}>Delete Node {idCounter}</button>\n      \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}